#lang sicp

(define (square n)
  (* n n))

(define (expmod1 base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod1 base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod1 base (- exp 1) m))
                    m))))

(define (expmod2 base exp m)
  (define (fast-expt b n)
    (cond ((= n 0) 1)
          ((even? n) (square (fast-expt b (/ n 2))))
          (else (* b (fast-expt b (- n 1))))))
  (remainder (fast-expt base exp) m))

(define (timed-test base exp m)
  (display "expmod1 (using normal way) ")
  (start-test expmod1 base exp m (runtime))
  (display "expmod2 (using fast-expt)  ")
  (start-test expmod2 base exp m (runtime))  
  (newline))

(define (start-test expmod base exp m start-time)
  (report-time base exp m (expmod base exp m) (- (runtime) start-time)))

(define (report-time base exp m result elapsed-time)
  (display base)
  (display " ")
  (display exp)
  (display " ")
  (display m)
  (display " ")
  (display result)
  (display " *** ")
  (display elapsed-time)
  (newline))

(timed-test 10 10 3)
(timed-test 10 10 7)
(timed-test 100 100 3)
(timed-test 100 100 7)
(timed-test 1000 1000 3)
(timed-test 1000 1000 7)
(timed-test 10000 10000 3)
(timed-test 10000 10000 7)
(timed-test 100000 100000 3)
(timed-test 100000 100000 7)
(timed-test 1000000 1000000 3)
(timed-test 1000000 1000000 7)
