#lang sicp

(define (entry tree) (car tree))

(define (left-branch tree) (cadr tree))

(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (union-set set1 set2)
  (define (union-list set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          (else (let ((x1 (car set1)) (x2 (car set2)))
                  (cond ((= x1 x2)
                         (cons x1 (union-list (cdr set1) (cdr set2))))
                        ((< x1 x2)
                         (cons x1 (union-list (cdr set1) set2)))
                        ((> x1 x2)
                         (cons x2 (union-list set1 (cdr set2)))))))))
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (list->tree (union-list list1 list2))))

(define (intersection-set set1 set2)
  (define (intersection-list set1 set2)
    (if (or (null? set1) (null? set2))
        '()
        (let ((x1 (car set1)) (x2 (car set2)))
          (cond ((= x1 x2)
                 (cons x1
                       (intersection-list (cdr set1)
                                          (cdr set2))))
                ((< x1 x2)
                 (intersection-list (cdr set1) set2))
                ((> x1 x2)
                 (intersection-list set1 (cdr set2)))))))
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (list->tree (intersection-list list1 list2))))

(union-set (list->tree '(1 5 6 8)) (list->tree '(1 3 6 7 10)))   ; (6 (3 (1 () ()) (5 () ())) (8 (7 () ()) (10 () ())))
(union-set (list->tree '(2 3 5)) (list->tree '(1 4 6)))          ; (3 (1 () (2 () ())) (5 (4 () ()) (6 () ())))
(union-set (list->tree '(10 30 50)) (list->tree '(10 20 30 40))) ; (30 (10 () (20 () ())) (40 () (50 () ())))

(intersection-set (list->tree '(1 5 6 8)) (list->tree '(1 3 6 7 10)))   ; (1 () (6 () ()))
(intersection-set (list->tree '(2 3 5)) (list->tree '(1 4 6)))          ; ()
(intersection-set (list->tree '(10 30 50)) (list->tree '(10 20 30 40))) ; (10 () (30 () ()))
